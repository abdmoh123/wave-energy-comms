// #include <ArduinoLowPower.h>
#include <SPI.h>
#include <LoRa.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <Wire.h>

const double MAX_EMF_VOLTAGE = 20.0;
const double EMF_MAX_FREQUENCY = 15.0;
const double SAMPLE_PERIOD = 1.0 / (10.0 * EMF_MAX_FREQUENCY); // x2 satisfies nyquist

double time = 0.0;
Adafruit_MPU6050 mpu;

void setup() {
  Serial.begin(9600);
  while (!Serial);

  // Serial.println("LoRa Transmitter");

  // halts program if lora failed to start
  if (!LoRa.begin(868E6)) {
    Serial.println("Starting LoRa failed!");
    while (1);
  }
  
  // Try to initialize!
  if (!mpu.begin()) {
    // Serial.println("Failed to find MPU6050 chip");
    while (1) {
      delay(10);
    }
  }
  // set accelerometer range to +-8G
  mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
  // set gyro range to +- 500 deg/s
  mpu.setGyroRange(MPU6050_RANGE_500_DEG);
  // set filter bandwidth to 21 Hz
  mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);
}

double gen_voltage(double time) {
  /* Generates a simulated value for emf voltage generated by generator */

  // generates a value between 15 and 7.5 Hz (varying frequency)
  double frequency_value = EMF_MAX_FREQUENCY * ((sin(PI * time) / 4) + 0.75); // frequency changes every 2 cycles
  double voltage = MAX_EMF_VOLTAGE * sin(frequency_value * 2 * PI * time);

  // prints voltage data (for plotting)
  Serial.print("EMF:");
  Serial.print(voltage);
  Serial.print(",");
  Serial.print("Frequency:");
  Serial.print(frequency_value);
  Serial.print(",");
  Serial.print("Time:");
  Serial.println(time);

  return voltage;
}

void loop() {
  // generates and prints simulated emf voltage
  double emf_volt = gen_voltage(time);
  
  // get new sensor events with the readings
  sensors_event_t accelerometer, gyroscope, thermometer;
  mpu.getEvent(&accelerometer, &gyroscope, &thermometer);
  
  // gets x y z acceleration
  double x_acc = accelerometer.acceleration.x;
  double y_acc = accelerometer.acceleration.y;
  double z_acc = accelerometer.acceleration.z;
  // prints out the values
  Serial.print("AccelerationX:");
  Serial.print(x_acc);
  Serial.print(",");
  Serial.print("AccelerationY");
  Serial.print(y_acc);
  Serial.print(",");
  Serial.print("AccelerationZ");
  Serial.println(z_acc);
  
  // gets x y z rotation
  double x_rot = gyroscope.gyro.x;
  double y_rot = gyroscope.gyro.y;
  double z_rot = gyroscope.gyro.z;
  // prints out the values
  Serial.print("RotationX:");
  Serial.print(x_rot);
  Serial.print(",");
  Serial.print("RotationX:");
  Serial.print(y_rot);
  Serial.print(",");
  Serial.print("RotationX:");
  Serial.println(z_rot);

  // gets and prints the temperature
  double temperature = thermometer.temperature;
  Serial.print("Temperature:");
  Serial.println(temperature);

  // Serial.println("");

  Serial.println("Sending packet...");
  // sends packet with data
  LoRa.beginPacket();
  LoRa.print(emf_volt);
  LoRa.print(" "); // space is used to separate each data value
  LoRa.print(x_acc);
  LoRa.print(" ");
  LoRa.print(x_rot);
  LoRa.print(" ");
  LoRa.print(y_acc);
  LoRa.print(" ");
  LoRa.print(y_rot);
  LoRa.print(" ");
  LoRa.print(z_acc);
  LoRa.print(" ");
  LoRa.print(z_rot);
  LoRa.endPacket();
  Serial.println("Packet sent!");

  // advances counter
  time += SAMPLE_PERIOD;
  // delays/waits for 1/15s (Sample period * 1000 due to s -> ms conversion)
  delay(SAMPLE_PERIOD * 1000);
}
