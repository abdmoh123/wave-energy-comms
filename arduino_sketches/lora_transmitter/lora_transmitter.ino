// #include <ArduinoLowPower.h>
#include <SPI.h>
#include <LoRa.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <Wire.h>

const double MAX_EMF_VOLTAGE = 20.0;
const double EMF_SAMPLE_PERIOD = 1.0 / 15.0; // max frequency = 15Hz
double counter = 0.0;

Adafruit_MPU6050 mpu;

void setup() {
  Serial.begin(9600);
  while (!Serial);

  Serial.println("LoRa Sender");

  // halts program if lora failed to start
  if (!LoRa.begin(868E6)) {
    Serial.println("Starting LoRa failed!");
    while (1);
  }
  
  // Try to initialize!
  if (!mpu.begin()) {
    Serial.println("Failed to find MPU6050 chip");
    while (1) {
      delay(10);
    }
  }
  // set accelerometer range to +-8G
  mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
  // set gyro range to +- 500 deg/s
  mpu.setGyroRange(MPU6050_RANGE_500_DEG);
  // set filter bandwidth to 21 Hz
  mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);
}

double gen_voltage(int counter) {
  /* Generates a simulated value for emf voltage generated by generator */

  return MAX_EMF_VOLTAGE * sin(counter);
}

void loop() {
  Serial.println("Sending packet: ");

  // generates and prints simulated emf voltage
  double emf_volt = gen_voltage(counter);
  Serial.println(emf_volt);
  
  // get new sensor events with the readings
  sensors_event_t accelerometer, gyroscope, thermometer;
  mpu.getEvent(&accelerometer, &gyroscope, &thermometer);
  
  // gets x y z acceleration
  double x_acc = accelerometer.acceleration.x;
  double y_acc = accelerometer.acceleration.y;
  double z_acc = accelerometer.acceleration.z;
  // prints out the values
  Serial.print("Acceleration X: ");
  Serial.print(x_acc);
  Serial.print(", Y: ");
  Serial.print(y_acc);
  Serial.print(", Z: ");
  Serial.print(z_acc);
  Serial.println(" m/s^2");
  
  // gets x y z rotation
  double x_rot = gyroscope.gyro.x;
  double y_rot = gyroscope.gyro.y;
  double z_rot = gyroscope.gyro.z;
  // prints out the values
  Serial.print("Rotation X: ");
  Serial.print(x_rot);
  Serial.print(", Y: ");
  Serial.print(y_rot);
  Serial.print(", Z: ");
  Serial.print(z_rot);
  Serial.println(" rad/s");

  // gets and prints the temperature
  Serial.print("Temperature: ");
  Serial.print(thermometer.temperature);
  Serial.println(" degC");

  Serial.println("");

  // sends packet with data
  LoRa.beginPacket();
  LoRa.print(emf_volt);
  LoRa.print(" "); // space is used to separate each data value
  LoRa.print(x_acc);
  LoRa.print(" ");
  LoRa.print(x_rot);
  LoRa.endPacket();

  // try to parse packet
  int packetSize = LoRa.parsePacket();
  if (packetSize) {
    // received a packet
    Serial.print("Received packet '");

    // read packet
    while (LoRa.available()) {
      Serial.print((char)LoRa.read());
    }

    // print RSSI of packet
    Serial.print("' with RSSI ");
    Serial.println(LoRa.packetRssi());
  }

  // advances counter
  counter += EMF_SAMPLE_PERIOD;

  // delays/waits for 0.5s
  delay(500);
}